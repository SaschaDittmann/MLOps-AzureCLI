name: MLOps Pipeline

on:
  workflow_dispatch:
  push:
    branches:    
      - dev

env:
  PYTHON_VERSION: 3.6
  RESOURCE_GROUP: mlops-demos
  REGION: westeurope
  AZUREML_WORKSPACE_NAME: mlops-mlwrksp
  AZUREML_COMPUTE_CLUSTER_NAME: cpu-cluster
  AZUREML_COMPUTE_VMSIZE: STANDARD_DS2_V2
  AZUREML_COMPUTE_MIN_NODES: 0
  AZUREML_COMPUTE_MAX_NODES: 2
  AZUREML_COMPUTE_IDLE_SECONDS_BEFORE_SCALEDOWN: 300
  AZUREML_EXPERIMENT_NAME: diabetes_sklearn
  AZUREML_MODEL_NAME: diabetes_model
  AZUREML_MODEL_PROFILE_NAME: diabetes-profile
  AZUREML_SERVICE_NAME_STAGING: diabetes-service-aci
  AZUREML_SERVICE_NAME_PRODUCTION: diabetes-service-aks
  AZURE_KUBERNETES_SERVICE_CLUSTER_NAME: aks
  AZURE_KUBERNETES_SERVICE_VMSIZE: Standard_B4ms
  AZURE_KUBERNETES_SERVICE_AGENT_COUNT: 3
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  setup:
    runs-on: ubuntu-18.04
    name: Setup Azure ML Prerequisites
    steps:
    - name: Install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Create Azure ML Service Workspace
      run: |
        az ml workspace create -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -l "$REGION" --exist-ok --yes
    - name: Create Azure ML Compute
      run: |
        az ml computetarget create amlcompute -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -n "$AZUREML_COMPUTE_CLUSTER_NAME" -s "$AZUREML_COMPUTE_VMSIZE" \
          --min-nodes "$AZUREML_COMPUTE_MIN_NODES" --max-nodes "$AZUREML_COMPUTE_MAX_NODES" \
          --idle-seconds-before-scaledown "$AZUREML_COMPUTE_IDLE_SECONDS_BEFORE_SCALEDOWN"
  train:
    runs-on: ubuntu-18.04
    name: Train, Evaluate & Register Model
    needs: [setup]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Python Requirements
      run: ./install_requirements.sh
      working-directory: setup
    - name: Data Quality Check
      run: pytest tests/unit/data_test.py --doctest-modules --junitxml=junit/test-results.xml --cov=data_test --cov-report=xml --cov-report=html
    - name: Publish Data Quality Check
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: junit/**/*.xml
        check_name: Data Quality Check Results
    - name: Create Metadata and Models Folder
      run: mkdir -p metadata && mkdir -p models
    - name: Install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Upload Data to the Default Datastore
      run: |
        az ml datastore upload -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -n $(az ml datastore show-default -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" --query name -o tsv) \
          -p data -u diabetes --overwrite true
    - name: Register Diabetes Dataset
      run: |
        defaultDatastore="$(az ml datastore show-default -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" --query name -o tsv)"
        sed "s/<default-datastore>/$defaultDatastore/g" datasets/diabetes-dataset-specs.json > metadata/diabetes-dataset-specs.json
        az ml dataset register -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -f metadata/diabetes-dataset-specs.json -t metadata/diabetes-dataset.json
    - name: Train Model
      run: |
        az ml run submit-script -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -e "$AZUREML_EXPERIMENT_NAME" --ct "$AZUREML_COMPUTE_CLUSTER_NAME" \
          -d conda_dependencies.yml -c train_diabetes \
          -t ../metadata/run.json train_diabetes.py
      working-directory: training
    - name: Register Model
      run: |
        az ml model register -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -n "$AZUREML_MODEL_NAME" -f metadata/run.json \
          --asset-path outputs/models/sklearn_diabetes_model.pkl \
          -d "Linear model using diabetes dataset" \
          --tag "data"="diabetes" --tag "model"="regression" \
          --model-framework ScikitLearn \
          -t metadata/model.json
    - name: Download Model
      run: |
        az ml model download -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -i $(jq -r .modelId metadata/model.json) \
          -t ./models --overwrite
    - name: Upload Model as Pipeline Artifact
      uses: actions/upload-artifact@v2
      with:
        name: model
        path: ./models/
    - name: Store Metadata
      uses: actions/upload-artifact@v2
      with:
        name: metadata-train
        path: ./metadata/
  registerenvironment:
    runs-on: ubuntu-18.04
    name: Register Inference Environment Definition
    needs: [setup]
    container: 
      image: mcr.microsoft.com/azure-cli:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Register Environment Definition
      run: |
        mkdir -p metadata
        az ml environment register -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -d deployment -t metadata/diabetes-environment.json
    - name: Store Environment Registration Results
      uses: actions/upload-artifact@v2
      with:
        name: environment
        path: ./metadata/diabetes-environment.json
  #modelprofile:
  #  # A model profile of a model is a resource requirement recommendation.
  #  runs-on: ubuntu-18.04
  #  needs: [train, registerenvironment]
  #  name: Azure ML Model Profiling
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v2
  #  - name: Download Metadata (From Training)
  #    uses: actions/download-artifact@v2
  #    with:
  #      name: metadata-train
  #      path: ./metadata/
  #  - name: Download Environment Registration Results
  #    uses: actions/download-artifact@v2
  #    with:
  #      name: environment
  #      path: ./metadata/
  #  - name: Setup Python
  #    uses: actions/setup-python@v2
  #    with:
  #      python-version: ${{ env.PYTHON_VERSION }}
  #  - name: Install Python Requirements
  #    run: ./install_requirements.sh
  #    working-directory: setup
  #  - name: Create Metadata Folder
  #    run: mkdir -p metadata
  #  - name: Install Azure CLI
  #    run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
  #  - name: Azure Login
  #    run: |
  #      clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
  #      clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
  #      tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
  #      subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
  #      az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
  #      az account set -s "$subscriptionId"
  #  - name: Add Azure ML CLI Extension
  #    run: |
  #      az extension add -n azure-cli-ml
  #  - name: Register Diabetes Test Samples
  #    run: |
  #      defaultDatastore="$(az ml datastore show-default -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" --query name -o tsv)"
  #      sed "s/<default-datastore>/$defaultDatastore/g" datasets/diabetes-test-samples-specs.json > metadata/diabetes-test-samples-specs.json
  #      az ml dataset register -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
  #        -f metadata/diabetes-test-samples-specs.json -t metadata/diabetes-test-samples.json
  #  - name: Create Azure ML Model Profile
  #    run: |
  #      echo "Using the following parameters:"
  #      profilename="$AZUREML_MODEL_PROFILE_NAME-$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 4 | head -n 1)"
  #      echo "profile name: $profilename"
  #      echo "environment name: $(jq -r '.name' ./metadata/diabetes-environment.json)"
  #      echo "environment verison: $(jq -r '.version' ./metadata/diabetes-environment.json)"
  #      az ml model profile -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
  #        -n "$profilename" \
  #        -f ./metadata/model.json --es ./deployment/score.py \
  #        -e $(jq -r '.name' ./metadata/diabetes-environment.json) \
  #        --ev $(jq -r '.version' ./metadata/diabetes-environment.json) \
  #        --idi $(jq -r '.registration.id' ./metadata/diabetes-test-samples.json) \
  #        --cc 2 --gb 2 \
  #        -t ./metadata/modelprofile.json
  #  - name: Store Profiling Results
  #    uses: actions/upload-artifact@v2
  #    with:
  #      name: modelprofile
  #      path: ./metadata/modelprofile.json
  stagingdeployment:
    runs-on: ubuntu-18.04
    name: Deploy to Staging (ACI)
    # needs: [train, registerenvironment, modelprofile]
    needs: [train, registerenvironment]
    container: 
      image: mcr.microsoft.com/azure-cli:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download Metadata (From Training)
      uses: actions/download-artifact@v2
      with:
        name: metadata-train
        path: ./metadata/
    - name: Download Environment Registration Results
      uses: actions/download-artifact@v2
      with:
        name: environment
        path: ./metadata/
    #- name: Download Profiling Results
    #  uses: actions/download-artifact@v2
    #  with:
    #    name: modelprofile
    #    path: ./metadata/
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Deploy to ML Service to ACI
      run: |
        echo "Using the following parameters:"
        echo "service name: $AZUREML_SERVICE_NAME_STAGING"
        echo "environment name: $(jq -r '.name' ../metadata/diabetes-environment.json)"
        echo "environment verison: $(jq -r '.version' ../metadata/diabetes-environment.json)"
        az ml model deploy -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -n "$AZUREML_SERVICE_NAME_STAGING" --overwrite \
          -f ../metadata/model.json --dc aciDeploymentConfig.yml --es score.py \
          -e "$(jq -r '.name' ../metadata/diabetes-environment.json)" \
          --ev "$(jq -r '.version' ../metadata/diabetes-environment.json)" #\
        # --pi ../metadata/modelprofile.json
      working-directory: deployment
  stagingintegrationtests:
    runs-on: ubuntu-18.04
    name: Run Integration Tests (Staging)
    needs: stagingdeployment
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Python Requirements
      run: ./install_requirements.sh
      working-directory: setup
    - name: Install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Run Integration Tests
      run: | 
        scoreurl=$(az ml service show -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" -n "$AZUREML_SERVICE_NAME_STAGING" --query scoringUri -o tsv)
        pytest tests/integration/integration_test.py --doctest-modules --junitxml=junit/test-results.xml --cov=integration_test --cov-report=xml --cov-report=html \
          --scoreurl "$scoreurl"
    - name: Publish Integration Tests (Staging)
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: junit/**/*.xml
        check_name: Integration Tests (Staging) Results
  productiondeployment:
    runs-on: ubuntu-18.04
    name: Deploy to Production (AKS)
    # needs: [train, registerenvironment, modelprofile, stagingintegrationtests]
    needs: [train, registerenvironment, stagingintegrationtests]
    container: 
      image: mcr.microsoft.com/azure-cli:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download Metadata (From Training)
      uses: actions/download-artifact@v2
      with:
        name: metadata-train
        path: ./metadata/
    - name: Download Environment Registration Results
      uses: actions/download-artifact@v2
      with:
        name: environment
        path: ./metadata/
    #- name: Download Profiling Results
    #  uses: actions/download-artifact@v2
    #  with:
    #    name: modelprofile
    #    path: ./metadata/
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Create Azure Kubernetes Service
      run: |
        existingaks=$(az ml computetarget list -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" --query "[?name=='$AZURE_KUBERNETES_SERVICE_CLUSTER_NAME'].name" -o tsv)
        [[ -z "$existingaks" ]] \
        && az ml computetarget create aks -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -n "$AZURE_KUBERNETES_SERVICE_CLUSTER_NAME" \
          -s "$AZURE_KUBERNETES_SERVICE_VMSIZE" -a "$AZURE_KUBERNETES_SERVICE_AGENT_COUNT" \
        || echo "compute target already exists, skipping..."
    - name: Deploy to ML Service to AKS
      run: |
        echo "Using the following parameters:"
        echo "service name: $AZUREML_SERVICE_NAME_PRODUCTION"
        echo "environment name: $(jq -r '.name' ../metadata/diabetes-environment.json)"
        echo "environment verison: $(jq -r '.version' ../metadata/diabetes-environment.json)"
        az ml model deploy -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" \
          -n "$AZUREML_SERVICE_NAME_PRODUCTION" --overwrite \
          -f ../metadata/model.json --dc aksDeploymentConfig.yml --es score.py \
          -e $(jq -r '.name' ../metadata/diabetes-environment.json) \
          --ev $(jq -r '.version' ../metadata/diabetes-environment.json) \
          --ct "$AZURE_KUBERNETES_SERVICE_CLUSTER_NAME"
        # --pi ../metadata/modelprofile.json 
      working-directory: deployment
  productionintegrationtests:
    runs-on: ubuntu-18.04
    name: Run Integration Tests (Production)
    needs: productiondeployment
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Python Requirements
      run: ./install_requirements.sh
      working-directory: setup
    - name: Install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Azure Login
      run: |
        clientId="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientId')"
        clientSecret="$(echo "$AZURE_CREDENTIALS" | jq -r '.clientSecret')"
        tenantId="$(echo "$AZURE_CREDENTIALS" | jq -r '.tenantId')"
        subscriptionId="$(echo "$AZURE_CREDENTIALS" | jq -r '.subscriptionId')"
        az login --service-principal -u "$clientId" -p "$clientSecret" --tenant "$tenantId"
        az account set -s "$subscriptionId"
    - name: Add Azure ML CLI Extension
      run: |
        az extension add -n azure-cli-ml
    - name: Run Integration Tests
      run: | 
        scoreurl=$(az ml service show -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" -n "$AZUREML_SERVICE_NAME_PRODUCTION" --query scoringUri -o tsv)
        scorekey=$(az ml service get-keys -g "$RESOURCE_GROUP" -w "$AZUREML_WORKSPACE_NAME" -n "$AZUREML_SERVICE_NAME_PRODUCTION" --query primaryKey -o tsv)
        pytest tests/integration/integration_test.py --doctest-modules --junitxml=junit/test-results.xml --cov=integration_test --cov-report=xml --cov-report=html \
          --scoreurl "$scoreurl" --scorekey "$scorekey"
    - name: Publish Integration Tests (Production)
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: junit/**/*.xml
        check_name: Integration Tests (Production) Results
